#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_globals() {
  local \
    _OLDPWD
  set \
    -e \
    -u
  shopt \
    -s \
      extglob
  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v \
        SOURCE_DATE_EPOCH \
      '%(%s)T' \
      -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  # shellcheck disable=SC2005
  _path="$( \
    _OLDPWD="$( \
      pwd)" && \
    export \
      _OLDPWD && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD
  # Set application name
  # from the script's file name
  app_name="${0##*/}"
  if [[ ! -v TERMUX_VERSION ]]; then
    TERMUX_VERSION=""
  fi
}

# shellcheck disable=SC2034
_global_variables() {
  target_host=""
  target_device=""
  target_user=""
  target_port=""
  color=""
  quiet=""
}

# Show an INFO message
# $1: message string
_msg_info() {
  local \
    _msg=(
      "$@"
    ) \
    _fmt_line=() \
    _line
  [[ "${quiet}" == "y" ]] || \
    for _line \
      in "${_msg[@]}"; do
      # _fmt_line+=(
      #   "$( \
      #     printf \
      #       '[%s] INFO: %s\n' \
      #       "${app_name}" \
      #       "${_line}")"
      # )
      _printf \
        '[%s] INFO: %s\n' \
        "${app_name}" \
        "${_line}"
    done
    # _printf \
    #   "${_fmt_line[*]}"
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg=()
  _msg=(
    "${1}"
  )
  _printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg=(
      "${1}"
    ) \
    _error=${2}
  _printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _target \
    _ass_target \
    _ass_type
  _target="${_obj}_${_var}"
  _ass_target="${_obj}[${_var}]"
  _ass_type="$( \
    _get_type \
      "${_obj}")"
  [[ "${_ass_type}" == "dict" ]] && \
    _target="${_ass_target}"
  printf \
    -v "${_target}" \
    "%s" \
    "${_value}"
}

# Returns type ('string', 'list', 'dict') given
# its name
# $1: an object
_get_type() {
  local \
    _obj="${1}" \
    _type="string" \
    _declare
  _declare="$( \
    declare \
      -p \
        "${_obj}" 2>&1)"
  [[ \
    "${_declare}" == \
    *"declare:"*"${_obj}"*": not found" ]] && \
    _type="undefined"
  [[ \
    "${_declare}" == \
    "declare -A "* ]] && \
    _type="dict"
  [[ \
    "${_declare}" == \
    "typeset -a"* ]] && \
    _type="array"
  echo \
    "${_type}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _ass_target \
    _ass_type \
    _msg \
    _ref \
    _type \
    _target
  _ass_target="${_obj}"
  _target="${_obj}_${_var}"
  _ref="${_target}[@]"
  _ass_ref="${_obj}[${_var}]"
  _type="$( \
    _get_type \
      "${_target}")"
  _ass_type="$( \
    _get_type \
      "${_ass_target}")"
  [[ "${_type}" == "undefined" ]] && \
  [[ "${_ass_type}" == "undefined" ]] && \
  [[ ! -v "${_ass_ref}" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_ass_type}" == "dict" ]] && \
    if [[ -v "${_ass_ref}" ]]; then
      _ref="${_ass_ref}"
    fi
  printf \
    "%s\n" \
    "${!_ref}"
}

_check_cmd(){
  local \
    _cmd="${1}" \
    _cmd_var \
    _flag="" \
    _pkgs=()
  shift \
    1
  _pkgs=(
    "$@"
  )
  _cmd_var="$( \
    printf \
      "%s" \
      "${_cmd}" | \
      sed \
        "s/-/_/g")"
  command \
     -v \
     "${_cmd}" &> /dev/null && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "$( \
        command \
          -v \
          "${_cmd}")" && \
    _flag=true
  [ -e "${_path}/${_cmd}" ] && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "${_path}/${_cmd}" && \
    _flag=true
  if [[ "${_flag}" != "true" ]]; then
    if [[ "${_pkgs[*]}" != "" ]]; then
      _cmd="${_pkgs[*]}"
    fi
    _msg_error \
      "Install ${_cmd}" \
      1
  fi
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${_obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable pointing to
# a path if an override variable is defined,
# otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$( \
	  _get \
	    "${_obj}" \
            "${_var}")")"
}

_requirements() {
  local \
    _pkg="ssh"
  _check_cmd \
    "${_pkg}" \
    "open${_pkg}"
  _check_cmd \
    "mk${_pkg}config" \
    "${_pkg}-utils"
}

_ifconfig() {
  local \
    _out="" \
    _nonetdev=() \
    _msg=()
  _nonetdev=(
    "Warning: cannot open /proc/net/dev"
    "(Permission denied). Limited output."
  )
  _stderr="$( \
    ifconfig \
      -a 2>&1)"
  _out="$( \
    ifconfig \
      -a 2>&1)"
  if [[ "${_stderr}" == *"${_nonetdev[*]}"* ]]; then
    _out="$( \
      echo \
        "${_out}" | \
        tail \
          -n \
            +2)"
  fi
  echo \
    "${_out}"
}

# Local ssh resolver
# $1: hostname of the device to connect
# $2: network device name
_dynssh() {
  local \
    _host="${1}" \
    _device="${2}" \
    _user="${3}" \
    _port="${4}" \
    _args=() \
    _msg=() \
    _sshcfg \
    _cfg \
    _hostname \
    _address="" \
    _ns
  shift \
    4
  _args=(
    "${@}"
  )
  _sshcfg="${HOME}/.cache/dynssh/ssh.config"
  mkdir \
    -p \
    "$(dirname \
         "${_sshcfg}")"
  [[ "$( \
       _ifconfig | \
          grep \
            "${_device}")" != "" ]] && \
    _address="$( \
      _get_address \
        "${_device}")"
  [[ "${_address}" == "" ]] && \
      _msg=(
	"${_device} is not connected"
        "to a network.") && \
      _msg_error \
        "${_msg[*]}" \
        1
  _msg=(
    "device ${_device}"
    "has address ${_address}"
  )
  _msg_info \
    "${_msg[*]}"
  _ns="$( \
    _get_subnet \
      "${_address}")"
  [[ "$(_confirm_subnet \
          "${_device}" \
          "${_ns}")" != "" ]] && \
    _msg_error \
      "anomalous behaviour" \
      1
  [[ "${_ns}" == "" ]] && \
    _msg=(
      "${_device} is not connected"
      "to a network.") && \
    _msg_error \
      "${_msg[*]}" \
      1
  _msg=(
    "${_device} is on subnet"
    "${_ns}.0")
  _msg_info \
    "${_msg[*]}"
  _read_conf
  _hostname="$( \
    echo \
      "${_cfg}" | \
      grep "${_host}=" | \
        awk \
	  -F "=" \
	  '{print $2}')"
  [[ "${_hostname}" == "" ]] && \
    _msg_error \
      "No address configured for ${_host}" \
      1
  _port="$( \
    echo \
      "${_hostname}" | \
      awk \
        -F ":" \
	'{print $2}')"
  _hostname="$( \
    echo \
      "${_hostname}" | \
      awk \
        -F ":" \
	'{print $1}')"
  _msg=(
    "connecting to ${_user}@${_host}:${_port}"
    )
  _msg_info \
    "${_msg[*]}"
  rm \
    -f \
    "${_sshcfg}"
  mksshconfig \
    "${_sshcfg}" \
    "${_host}" \
    "${_ns}.${_hostname}" \
    "${_user}" \
    "${_port}"
  # _connection_test
  ssh \
    -F "${_sshcfg}" \
    -o StrictHostKeyChecking=no \
    "${_host}" \
    "${_args[@]}"
}

_connection_test() {
  if ssh \
       -q \
       -F "${_sshcfg}" \
       -o StrictHostKeyChecking=no \
       -o ConnectTimeOut=5 \
       "${_host}" \
       'exit 0'; then
    return
  fi
  _msg_error \
    "can't connect to host '${_host}" \
    1
}

# Get subnet from IPv4 address
# $1: address
_get_subnet() {
  local \
    _address="${1}"
  echo \
    "${_address%.*}"
}

_route() {
  route \
    2>&1
}

_confirm_subnet() {
  local \
    _device="${1}" \
    _ns="${2}" \
    _confirm \
    _no_route=()
  _no_route=(
    "INET (IPv4) not configured"
    "in this system.")
  _confirm="$( \
    _get_subnet \
      "$(_route | \
           grep \
	     "${_device}" | 
           grep  \
             "${_ns}" | \
	     awk \
	       '{print $1}')")"
  [[  "$(_route)" == \
      "${_no_route[*]}" ]] && \
    return
  if [[ "${_ns}" != \
     "${_confirm}" ]]; then
    _msg=(
      "Mismatch between 'ifconfig' (${_ns})"
      "and 'route' (${_confirm:-None}) outputs."
      "Cannot confirm subnet."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
}

_get_address() {
  local \
    _device="${1}" \
    _line
  _line="$( \
    _ifconfig | \
      grep \
        -Pn \
        "${_device}" | \
        cut \
          -d":" \
          -f 1)"
  _line=$(( \
    _line + 1 ))
  _ifconfig | \
    sed \
      -n \
        "${_line}p;" | \
      awk \
        '{print $2}'
}

_make_conf() {
  mkdir \
    -p \
    "$(dirname \
         "${_conf}")"
  echo \
    "# values go from 2 to 254" >> \
    "${_conf}"
  echo \
    "# device=111" >> \
    "${_conf}"
  [[ \
    "$( \
      command \
        -v \
        "hostnamectl")" != "" ]] && \
    _host="$( \
      hostnamectl \
        hostname)"
  _input_credentials
  _address="$( \
    _get_address \
      "${_device}")"
  echo \
    "${_host}=${_address##*.}:${_port}" >> \
    "${_conf}"
}

_check_conf() {
  local \
    _conf="${1}" \
    _address \
    _dir \
    _host \
    _port \
    _msg=() \
    _perm
  _dir="${HOME}/.config"
  _conf="${_dir}/${app_name}/localhosts.cfg"
  _msg=(
    "Configuration file:"
    "${_conf}"
  )
  _msg_info \
    "${_msg[*]}"
  if [ ! -e  "${_conf}" ]; then
    _make_conf
  fi
  _perm="$( \
    stat \
      -c '%a' \
      "${_conf}")"
  if [[ "${_perm}" != "700" ]]; then
    chmod \
      700 \
      "${_conf}"
  fi
}

_input_credentials() {
  if [[ "${_host}" == "" ]]; then
    printf \
      "  %s\n" \
      "enter name for this host:" && \
    while \
      [[ ! -v "_host" ]]; do
      read \
        -r \
        _host
    done
  fi
  printf \
    -v \
      "_port" \
    "%s\n" \
    "$( \
      _get \
        "target" \
        "port")"
  _msg_info \
    "setting local port as target port ${_port}"
  if \
    [[ \
      "${_port}" == "" ]]; then
    printf \
      "  %s\n" \
      "enter port for this host:"
    while \
      [[ \
        "${_port}" == "" ]]; do
      read \
        -r \
        _port
    done
  fi
  _msg_info \
    "Set port ${_port}"
}

_read_conf() {
  local \
    _conf \
    _dir \
    _hostname=""
  _dir="${HOME}/.config"
  _conf="${_dir}/${app_name}/localhosts.cfg"
  _check_conf \
    "${_conf}"
  _cfg="$( \
    cat \
      "${_conf}")"
  _cfg="$(\
    echo \
      "${_cfg}" | \
      sed \
        -e "/# */d" | \
	grep \
          "=" )"
  if [[ "${_cfg}" == '' ]]; then
    _msg_error \
      "empty configuration file!" \
      1
  fi
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "target" \
    "device" \
    "wlan0"
  _set_override \
    "target" \
    "user" \
    "dev"
  _set_override \
    "target" \
    "port" \
    "2222"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    [options]
    <host>
    [ssh options]
  options:
     -d <device>          Specify network device
                          Default: '$(_get "target" "device")'
     -u <user>            user to connect to.
                          Default: '$(_get "target" "user")'
     -p <port>            Connect through a specific port.
                          Default: '$(_get "target" "port")'
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output

  host:
    Host to connect to.
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _build_date
  TZ=UTC \
    printf \
      -v _build_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "          Connection date:   $(_get "_build" "date")"
  _msg_info "                     Host:   $(_get "target" "host")"
  _msg_info "                   Device:   $(_get "target" "device")"
  _msg_info "                     User:   $(_get "target" "user")"
  _msg_info "                     Port:   $(_get "target" "port")"
  if [[ "$(_get \
          "ssh" \
          "options")" != "" ]] && \
    _msg_info \
             "             SSH options:"]]; then
    _display_flags                        "${ssh_options[@]}"
  fi
}

# Colorized print
_printf() {
  local \
    _args=()
    _pygmentize_opts=()
  _pygmentize_opts=(
    -g
    -O style=emacs
  )
  _args=(
      "$@"
  )
  # shellcheck disable=SC2059
  _sho \
    "$( \
      printf \
        "${_args[@]}")" \
    "${_pygmentize_opts[@]}"
}

# Colorized Display function
_sho() {
  local \
    _text="${1}" \
    _pygmentize
  _pygmentize="$( \
    command \
      -v \
      "pygmentize"{,2} | \
      head \
        -n \
	1)"
  shift
  _pygmentize_opts=(
    "$@"
  )
  [[ "${color}" == "y" ]] && \
  [[ "${_pygmentize}" != "" ]] && \
    echo \
      "${_text}" | 
      "${_pygmentize}" \
        "${_pygmentize_opts[@]}" && \
    return
  printf \
    "%s\n" \
    "${_text}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'd:u:p:cvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_target_device="${OPTARG}" ;;
    u) override_target_user="${OPTARG}" ;;
    p) override_target_port="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No host specified." \
    0
  _usage 0
fi
_set \
  "target" \
  "host" \
  "${1}"
shift \
  1
ssh_options=(
  "$@"
)
_set_overrides
_show_config
_dynssh \
  "$( \
    _get \
      "target" \
      "host")" \
  "$( \
    _get \
      "target" \
      "device")" \
  "$( \
    _get \
      "target" \
      "user")" \
  "$( \
    _get \
      "target" \
      "port")" \
  "${ssh_options[@]}"

# vim:set sw=2 sts=-1 et:
