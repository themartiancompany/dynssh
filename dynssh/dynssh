#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_host=""
  target_device=""
  target_user=""
  target_port=""
  ssh_command=""
  ssh_options=()
  proxy_address=""
  proxy_port=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _pkg="ssh"
  _check_cmd \
    "${_pkg}" \
    "open${_pkg}"
  _check_cmd \
    "mk${_pkg}config" \
    "${_pkg}-utils"
  _check_cmd \
    "hotspot-resolver"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "target" \
      "host").cfg"
  echo \
    "${_conf}"
}

# Local ssh resolver
# $1: hostname of the device to connect
# $2: network device name
_dynssh() {
  local \
    _host="${1}" \
    _device="${2}" \
    _user="${3}" \
    _port="${4}" \
    _ssh_command="${5}" \
    _args=() \
    _msg=() \
    _cache \
    _sshcfg \
    _conf \
    _cfg \
    _address
  shift \
    5
  _args=(
    "${@}"
  )
  _conf="$( \
    _get_conf_path \
      "${_host}")"
  _cache="$( \
    _get_cache \
      "$( \
        _get \
          "app" \
          "name")" \
      "${_host}")"
  _sshcfg="${_cache}/ssh.config"
  mkdir \
    -p \
    "${_cache}"
  if [[ "${_port}" == "" ]]; then
    _port="$( \
        _read_settings \
          "${_conf}" \
          "${_host}" \
          "port")"
  fi
  _hotspot_resolver_opts=(
    -d 
      "${_device}"
  )
  _address="$( \
    hotspot-resolver \
      "${_hotspot_resolver_opts[@]}" \
      get \
        "${_host}")"
  _msg=(
    "connecting to ${_user}@${_address}:${_port}"
    )
  _msg_info \
    "${_msg[*]}"
  rm \
    -f \
    "${_sshcfg}"
  mksshconfig \
    "${_sshcfg}" \
    "${_host}" \
    "${_address}" \
    "${_user}" \
    "${_port}"
  # _connection_test
  "${_ssh_command}" \
    -t \
    -F "${_sshcfg}" \
    -o \
      StrictHostKeyChecking=no \
    "${_args[@]}"
}

_connection_test() {
  if "${_ssh_command}" \
       -q \
       -F "${_sshcfg}" \
       -o StrictHostKeyChecking=no \
       -o ConnectTimeOut=5 \
       "${_host}" \
       'exit 0'; then
    return
  fi
  _msg_error \
    "can't connect to host '${_host}" \
    1
}

_make_conf() {
  local \
    _host="${1}" \
    _conf="${2}" \
    _port="${3}"
  if [[ "${_conf}" == "" ]]; then
    _conf="$( \
      _get_conf_path \
        "${_host}")"
  fi
  mkdir \
    -p \
    "$( \
      dirname \
        "${_conf}")"
  _write_setting \
    "${_conf}" \
    "port" \
    "${_port}"
  # _write_setting \
  #   "${_conf}" \
  #   "method" \
  #   "hotspot-resolver"
}

_check_conf() {
  local \
    _conf="${1}" \
    _host="${2}" \
    _address \
    _dir \
    _port \
    _msg=() \
    _perm
  if [[ "${_conf}" == "" ]]; then
    _conf="$( \
      _get_conf_path \
        "${_host}")"
  fi
  _msg=(
    "Configuration file:"
    "${_conf}"
  )
  _msg_info \
    "${_msg[*]}"
  if [ ! -e  "${_conf}" ]; then
    _make_conf
  fi
  _perm="$( \
    stat \
      -c '%a' \
      "${_conf}")"
  if [[ "${_perm}" != "700" ]]; then
    chmod \
      700 \
      "${_conf}"
  fi
}

_input_credentials() {
  if [[ "${_host}" == "" ]]; then
    _host="$( \
      hostnamectl \
        hostname)"
  fi
  if [[ "${_host}" == "" ]]; then
    # _input \
    #   "_host" \
    #   "enter name for this host"
    printf \
      "  %s\n" \
      "enter name for this host:" && \
    while \
      [[ ! -v "_host" ]]; do
      read \
        -r \
        _host
    done
  fi
  printf \
    -v \
      "_port" \
    "%s\n" \
    "$( \
      _get \
        "target" \
        "port")"
  _msg_info \
    "setting local port as target port ${_port}"
  if \
    [[ \
      "${_port}" == "" ]]; then
    printf \
      "  %s\n" \
      "enter port for this host:"
    while \
      [[ \
        "${_port}" == "" ]]; do
      read \
        -r \
        _port
    done
  fi
  _msg_info \
    "Set port ${_port}"
}

_set_overrides() {
  _set_override \
    "ssh" \
    "command" \
    "$( \
      command \
        -v \
        "ssh")"
  _set_override \
    "target" \
    "host" \
    ""
  _set_override \
    "target" \
    "device" \
    "wlan0"
  _set_override \
    "target" \
    "user" \
    "dev"
  _set_override \
    "target" \
    "port" \
    "2222"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    [options]
    <host>
    [ssh options]
  options:
     -t <target_host>     Specify target host
     -d <device>          Specify network device
                          Default: '$(_get "target" "device")'
     -u <user>            user to connect to.
                          Default: '$(_get "target" "user")'
     -p <port>            Connect through a specific port.
                          Default: '$(_get "target" "port")'
     -T <proxy_address>   Specify a proxy address
     -P <proxy_port>      Specify a proxy port
     -C <ssh_path>        Connect using a specific ssh command.
                          Default: '$(_get "ssh" "command")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _connect_date
  TZ=UTC \
    printf \
      -v _connect_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "          Connection date:   $(_get "_connect" "date")"
  _msg_info "              SSH command:   $(_get "ssh" "command")"
  _msg_info "                     Host:   $(_get "target" "host")"
  _msg_info "                   Device:   $(_get "target" "device")"
  _msg_info "                     User:   $(_get "target" "user")"
  _msg_info "                     Port:   $(_get "target" "port")"
  _msg_info "            Proxy address:   $(_get "proxy" "address")"
  _msg_info "               Proxy port:   $(_get "proxy" "port")"
  _msg_info "       Configuration file:   $(_get_conf_path "$(_get "target" "host")")"
  if [[ "$(_get \
          "ssh" \
          "options")" != "" ]]; then
    _msg_info "                 SSH options:   ${ssh_options[*]}"
  fi
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    't:d:u:p:T:P:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    d) override_target_device="${OPTARG}" ;;
    u) override_target_user="${OPTARG}" ;;
    p) override_target_port="${OPTARG}" ;;
    T) override_proxy_address="${OPTARG}" ;;
    P) override_proxy_port="${OPTARG}" ;;
    C) override_ssh_command="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
ssh_options=(
  "$@"
)
echo \
  "${ssh_options[*]}"
_set_overrides
_config_user_init \
  "$(_get \
       "app" \
       "name")"
[[ "$(_get \
        "target" \
        "host")" == "" ]] && \
  _msg_error \
   "-t option is required" \
   0 && \
  _usage \
   1
_show_config
_dynssh \
  "$( \
    _get \
      "target" \
      "host")" \
  "$( \
    _get \
      "target" \
      "device")" \
  "$( \
    _get \
      "target" \
      "user")" \
  "$( \
    _get \
      "target" \
      "port")" \
   "$( \
    _get \
      "ssh" \
      "command")" \
  "${ssh_options[@]}"

# vim:set sw=2 sts=-1 et:
